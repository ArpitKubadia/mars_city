#!/usr/bin/python

import sys
import time
import json
import redis
import collections
import PyTango

# entries received from redis and stored in the file look like:
# {"type": "temperature", "command": "return", "value": 20, "time": 1360689618.9144821}
# {"type": "humidity", "command": "return", "value": 40, "time": 1360689619.886636}


#XXX: this could have an API similar to BufferedLineReader,
#     where pop(type) does the same as read_json_line(type)
class UniqueMessageQueueWithDelay(object):
    def __init__(self, remote='hunveyor_test', local='local_test'):
        self.remote = remote
        self.local = local
        self.redis = redis.Redis(host='gwelican.eu', port=443)
        # clean queue
        self.redis.delete(local)

    def add(self, data, delay=0):
        temp = json.loads(data)
        temp["time"] = time.time()
        score = time.time() + delay
        self.redis.zadd(self.remote, json.dumps(temp), score)

    def pop(self, type):
        #min_score = 0
        #max_score = time.time()
        #result = self.redis.zrangebyscore(
            #self.local, min_score, max_score, start=0, num=1, withscores=False)
        for entry in self.redis.zrange(self.local, 0, -1):
            if type in entry:
                return entry
        return False

    def remove(self, data):
        return self.redis.zrem(self.local, data)


class BufferedLineReader(object):
    """
    Read a few lines from the file and keep them in a buffer.
    When read_json_line(type) is called, find the right line in the buffer
    and return it.
    """
    def __init__(self, fname):
        self.f = open(fname)
        self.buffer = collections.deque()
        # add 5 lines to the buffer
        self.add_lines_to_buffer(5)

    def add_line_to_buffer(self):
        """
        Read one line from the file and add it to the buffer.
        If we reached the end of file, restarts from the beginning of the file.
        """
        data = self.f.readline().strip()
        if not data:
            print ('Reached end of simulation data. '
                   'Restarting from the beginning of the file...')
            self.f.seek(0)
            data = self.f.readline().strip()
        self.buffer.append(json.loads(data))

    def add_lines_to_buffer(self, n):
        """
        Read n lines from the file and add them to the buffer.
        """
        for x in range(n):
            self.add_line_to_buffer()

    def read_json_line(self, type):
        """
        Search in the buffer a line of the right type and return it.
        If the line can't be found in the buffer, read 5 more lines and retry.
        """
        for value in self.buffer:
            if value['type'] == type:
                self.buffer.remove(value)
                if len(self.buffer) < 5:
                    self.add_line_to_buffer()
                print 'read_%s (sim): %s' % (type, value)
                return value
        else:
            # couldn't find a line with that type in the buffer,
            # so add 5 lines and retry
            self.add_lines_to_buffer(5)
            self.read_json_line(type)

    def close(self):
        self.f.close()


class PyDevice(PyTango.DeviceClass):
    cmd_list = {'start_simulation': [[PyTango.ArgType.DevVoid],
                                     [PyTango.ArgType.DevVoid]],
                'stop_simulation': [[PyTango.ArgType.DevVoid],
                                    [PyTango.ArgType.DevVoid]]}
    attr_list = {'temp': [[PyTango.ArgType.DevFloat,
                           PyTango.AttrDataFormat.SCALAR,
                           PyTango.AttrWriteType.READ],
                          {'polling period': 2000}],
                'humidity': [[PyTango.ArgType.DevFloat,
                              PyTango.AttrDataFormat.SCALAR,
                              PyTango.AttrWriteType.READ],
                             {'polling period': 2000}]}
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")


class PyHunveyorDevice(PyTango.Device_4Impl):
    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.info_stream('In PyHunveyorDevice.__init__')
        self.hunveyor = UniqueMessageQueueWithDelay()
        self.datafilename = 'hunveyor.data'
        self.simulation = False
        self.f = open(self.datafilename, 'a')
        PyHunveyorDevice.init_device(self)

    def start_simulation(self):
        if self.simulation:
            print 'Simulation already started...'
            return
        print 'Starting simulation...'
        self.simulation = True
        self.f.close()
        self.f = BufferedLineReader(self.datafilename)

    def stop_simulation(self):
        if not self.simulation:
            print 'Simulation is not running...'
            return
        print 'Stopping simulation...'
        self.simulation = False
        self.f.close()
        self.f = open(self.datafilename, 'a')

    def write_data(self, data):
        #print 'writing', repr(data + '\n')
        self.f.write(data + '\n')
        self.f.flush()

    def read_temp(self, the_att):
        if self.simulation:
            self.simulation_read_temp(the_att)
        else:
            self.real_read_temp(the_att)

    def real_read_temp(self, the_att):
        self.info_stream("read_temp")
        data = self.hunveyor.pop('temperature')
        print 'read_temp: result is', data
        if data != False:
            result = json.loads(data)
            the_att.set_value(result['value'])
            self.write_data(data)
            self.hunveyor.remove(data)

        # request a new value
        data = {"command": "readtemp", "arguments": {"address": 0x92}}
        self.hunveyor.add(json.dumps(data))

    def simulation_read_temp(self, the_att):
        self.info_stream("read_temp")
        data = self.f.read_json_line('temperature')
        the_att.set_value(data['value'])


    def read_humidity(self, the_att):
        if self.simulation:
            self.simulation_read_humidity(the_att)
        else:
            self.real_read_humidity(the_att)

    def real_read_humidity(self, the_att):
        self.info_stream("read_humidity")
        data = self.hunveyor.pop('humidity')
        print 'read_humidity: result is', data
        if data != False:
            result = json.loads(data)
            the_att.set_value(result['value'])
            self.write_data(data)
            self.hunveyor.remove(data)

        # request a new value
        data = {"command": "readhumidity", "arguments": {}}
        self.hunveyor.add(json.dumps(data))

    def simulation_read_humidity(self, the_att):
        self.info_stream("read_humidity")
        data = self.f.read_json_line('humidity')
        the_att.set_value(data['value'])

    def is_humidity_allowed(self, req_type):
        return self.get_state() == PyTango.DevState.ON

    def init_device(self):
        self.info_stream('In Python init_device method')
        self.set_state(PyTango.DevState.ON)

if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyHunveyorDevice)

    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()
