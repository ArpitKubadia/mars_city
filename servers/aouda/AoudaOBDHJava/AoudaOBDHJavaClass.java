//+======================================================================
// $Source:  $
//
// Project:   	Tango Device Server
//
// Description:	java source code for the AoudaOBDHJava_start class .
//              This class is a singleton class and implements everything
//              which exists only once for all the  AoudaOBDHJava_start object
//              It inherits from the DeviceClass class.
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-======================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

package AoudaOBDHJava;

import java.util.*;
import org.omg.CORBA.*;
import fr.esrf.Tango.*;
import fr.esrf.TangoDs.*;
import fr.esrf.TangoApi.*;

public class AoudaOBDHJavaClass extends DeviceClass implements TangoConst
{
	/**
	 *	AoudaOBDHJavaClass class instance (it is a singleton).
	 */
	private static AoudaOBDHJavaClass	_instance = null;
	/**
	 *	Class properties array.
	 */
	private DbDatum[]	cl_prop = null;

	//--------- Start of properties data members ----------


//--------- End of properties data members ----------


//===================================================================			
//
// method : 		instance()
// 
// description : 	static method to retrieve the AoudaOBDHJavaClass object 
//					once it has been initialised
//
//===================================================================			
	public static AoudaOBDHJavaClass instance()
	{
		if (_instance == null)
		{
			System.err.println("AoudaOBDHJavaClass is not initialised !!!");
			System.err.println("Exiting");
			System.exit(-1);
		}
		return _instance;
	}

//===================================================================			
//
// method : 		Init()
// 
// description : 	static method to create/retrieve the AoudaOBDHJavaClass
//					object. This method is the only one which enables a 
//					user to create the object
//
// in :			- class_name : The class name
//
//===================================================================			
	public static AoudaOBDHJavaClass init(String class_name) throws DevFailed
	{
		if (_instance == null)
		{
			_instance = new AoudaOBDHJavaClass(class_name);
		}
		return _instance;
	}
	
//===================================================================			
//
// method : 		AoudaOBDHJavaClass()
// 
// description : 	constructor for the AoudaOBDHJavaClass class
//
// argument : in : 	- name : The class name
//
//===================================================================			
	protected AoudaOBDHJavaClass(String name) throws DevFailed
	{
		super(name);

		Util.out2.println("Entering AoudaOBDHJavaClass constructor");
		write_class_property();
		get_class_property();
	
		Util.out2.println("Leaving AoudaOBDHJavaClass constructor");
	}
	
//===================================================================			
//
// method : 		command_factory()
// 
// description : 	Create the command object(s) and store them in the
//					command list
//===================================================================			
	public void command_factory()
	{

		//	add polling if any
		for (int i=0 ; i<command_list.size(); i++)
		{
			Command	cmd = (Command)command_list.elementAt(i);
		}
	}


//===================================================================			
//
// method : 		device_factory()
// 
// description : 	Create the device object(s) and store them in the 
//					device list
//
// argument : in : 	String[] devlist : The device name list
//
//===================================================================			
	public void device_factory(String[] devlist) throws DevFailed
	{
	
		for (int i=0 ; i<devlist.length ; i++)
		{
			Util.out4.println("Device name : " + devlist[i]);
						
			// Create device and add it into the device list
			//----------------------------------------------
			device_list.addElement(new AoudaOBDHJava(this, devlist[i]));

			// Export device to the outside world
			//----------------------------------------------
			if (Util._UseDb == true)
				export_device(((DeviceImpl)(device_list.elementAt(i))));
			else
				export_device(((DeviceImpl)(device_list.elementAt(i))), devlist[i]);
		}
	}

//=============================================================================
//
//	Method:	attribute_factory(Vector att_list)
//
//=============================================================================
	public void attribute_factory(Vector att_list) throws DevFailed
	{
		//	Attribute : Ecg
		Attr	ecg = 
			new Attr("Ecg", Tango_DEV_LONG, AttrWriteType.READ);
		ecg.set_polling_period(5000);
		att_list.addElement(ecg);
		//	Attribute : Heartrate
		Attr	heartrate = 
			new Attr("Heartrate", Tango_DEV_LONG, AttrWriteType.READ);
		heartrate.set_polling_period(5000);
		att_list.addElement(heartrate);
		//	Attribute : HelmetTemp
		Attr	helmet_temp = 
			new Attr("HelmetTemp", Tango_DEV_LONG, AttrWriteType.READ);
		helmet_temp.set_polling_period(5000);
		att_list.addElement(helmet_temp);
		//	Attribute : HelmetHumidity
		Attr	helmet_humidity = 
			new Attr("HelmetHumidity", Tango_DEV_LONG, AttrWriteType.READ);
		helmet_humidity.set_polling_period(5000);
		att_list.addElement(helmet_humidity);
		//	Attribute : CO2
		Attr	CO2 = 
			new Attr("CO2", Tango_DEV_LONG, AttrWriteType.READ);
		helmet_humidity.set_polling_period(5000);
		att_list.addElement(CO2);
		//	Attribute : O2
		Attr	O2 = 
			new Attr("O2", Tango_DEV_LONG, AttrWriteType.READ);
		helmet_humidity.set_polling_period(5000);
		att_list.addElement(O2);
		//	Attribute : AccelerationBody
		Attr	AccelerationBody = 
			new Attr("AccelerationBody", Tango_DEV_LONG, AttrWriteType.READ);
		helmet_humidity.set_polling_period(5000);
		att_list.addElement(AccelerationBody);

	}
//===================================================================
/**
 *	Get the class property for specified name.
 *
 *	@param name The property name.
 */
//===================================================================
	public DbDatum get_class_property(String name)
	{
		for (int i=0 ; i<cl_prop.length ; i++)
			if (cl_prop[i].name.equals(name))
				return cl_prop[i];
		//	if not found, return  an empty DbDatum
		return new DbDatum(name);
	}

//===================================================================
/**
 *	Read the class properties from database.
 */
//===================================================================			
	public void get_class_property() throws DevFailed
	{
		//	Initialize your default values here.
		//------------------------------------------


		//	Read class properties from database.(Automatic code generation)
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
			};

		//	Call database and extract values
		//--------------------------------------------
		cl_prop = get_db_class().get_property(propnames);
		int	i = -1;

		//	End of Automatic code generation
		//-------------------------------------------------------------

	}

//===================================================================
/**
 *	Set class description as property in database
 */
//===================================================================			
	private void write_class_property() throws DevFailed
	{	
		//	First time, check if database used
		//--------------------------------------------
		if (Util._UseDb == false)
			return;

		//	Prepeare DbDatum
		//--------------------------------------------
		DbDatum[]	data = new DbDatum[2];
		data[0] = new DbDatum("ProjectTitle");
		data[0].insert("C3");

		data[1] = new DbDatum("Description");
		data[1].insert("");

		//	Call database and and values
		//--------------------------------------------
		get_db_class().put_property(data);
	}

}
