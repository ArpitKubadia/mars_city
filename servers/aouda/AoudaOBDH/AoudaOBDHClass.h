/*----- PROTECTED REGION ID(AoudaOBDHClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        AoudaOBDHClass.h
//
// description : Include for the AoudaOBDHClass root class.
//               This class is the singleton class for.
//               the AoudaOBDH device class..
//               It contains all properties and methods which the .
//               AoudaOBDH requires only once e.g. the commands.
//
// project :     ERAS_C3.
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef AOUDAOBDHCLASS_H
#define AOUDAOBDHCLASS_H

#include <tango.h>
#include <AoudaOBDH.h>

/*----- PROTECTED REGION END -----*/

namespace AoudaOBDH_ns
{
	/*----- PROTECTED REGION ID(AoudaOBDH::classes for dynamic creation) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AoudaOBDH::classes for dynamic creation



//=========================================
//	Define classes for attributes
//=========================================
//	Attribute HelmetTemp class definition
class HelmetTempAttrib: public Tango::Attr
{
public:
	HelmetTempAttrib():Attr("HelmetTemp",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~HelmetTempAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AoudaOBDH *>(dev))->read_HelmetTemp(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AoudaOBDH *>(dev))->is_HelmetTemp_allowed(ty);}
};

//	Attribute HelmetHumidity class definition
class HelmetHumidityAttrib: public Tango::Attr
{
public:
	HelmetHumidityAttrib():Attr("HelmetHumidity",
	                   Tango::DEV_DOUBLE, Tango::READ) {};
	~HelmetHumidityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<AoudaOBDH *>(dev))->read_HelmetHumidity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<AoudaOBDH *>(dev))->is_HelmetHumidity_allowed(ty);}
};





//=========================================
//	Define classes for commands
//=========================================




/**
 *	The TemplateDevServClass singleton definition
 */

class
#ifdef _TG_WINDOWS_
	__declspec(dllexport)
#endif
	AoudaOBDHClass : public Tango::DeviceClass
{
	/*----- PROTECTED REGION ID(AoudaOBDH::Additionnal DServer data members) ENABLED START -----*/

	/*----- PROTECTED REGION END -----*/	//	AoudaOBDH::Additionnal DServer data members



public:
//	write class properties data members
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AoudaOBDHClass *init(const char *);
	static AoudaOBDHClass *instance();
	~AoudaOBDHClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AoudaOBDHClass(string &);
	static AoudaOBDHClass *_instance;
	void command_factory();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	void get_class_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
	void create_static_attribute_list(vector<Tango::Attr *> &);
	void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
	vector<string>	defaultAttList;


};

}	//	namespace

#endif	//	AOUDAOBDHCLASS_H

