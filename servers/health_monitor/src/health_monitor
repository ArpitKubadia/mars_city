#!/usr/bin/env python

from __future__ import division, print_function

import ConfigParser
from datetime import datetime
import os
import sys
from threading import Thread, Event
import time

from PyTango import ConnectionFailed, DevFailed, AttrWriteType, AttrQuality
from PyTango import DevState, DevVarLongStringArray, DeviceProxy
from PyTango.server import Device, DeviceMeta, attribute, DispLevel
from PyTango.server import run, class_property, command

from health_monitor import HealthMonitor
import numpy as np


class HealthMonitorServer(Device):
    __metaclass__ = DeviceMeta

    source_addresses = attribute(label='Source Addresses', dtype=(str,),
                                 display_level=DispLevel.OPERATOR,
                                 access=AttrWriteType.READ,
                                 doc='Source Addresses')

    def read_source_addresses(self):
        self.info_stream('read_source_addresses(%s, %s)',
                         self.source_id, self.name)
        return self._source_addresses, time.time(), AttrQuality.ATTR_VALID

    @command(dtype_in=DevVarLongStringArray,
             doc_in="Get alarms from all the sources for "
                    "the last [period] seconds",
             dtype_out=DevVarLongStringArray)
    def get_alarms(self, params):
        period, source = params[0]
        alarms = self.health_mon.get_alarms(period, source)
        if alarms:
            ret_val = [(a.alarm_lvl,
                        a.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f'))
                       for a in alarms]
            ret_val = zip(*ret_val)
        else:
            ret_val = [[], []]
        return ret_val

    def __del__(self):
        self.stop_polling.set()

    def init_device(self):
        self.info_stream('Initializing device')
        self.health_mon = HealthMonitor(
                                    sources=self._source_addresses,
                                    word_size=self.word_size,
                                    window_factor=self.window_factor,
                                    lead_window_factor=self.lead_window_factor,
                                    lag_window_factor=self.lag_window_factor,
                                    resolution=self.resolution,
                                    conn_str=self.conn_str
                                        )
        self.stop_polling = Event()
        Thread(target=self._poll_suit).start()
        self.set_state(DevState.ON)
        self.info_stream('Finished initializing device')

    def _poll_suit(self):
        self.info_stream('Polling from: %s' % self._source_addresses)
        for address in self._source_addresses:
            proxy = DeviceProxy(address)
            while not self.stop_polling.is_set():
                try:
                    data = proxy.get_data(self.polling_frequency)
                    if len(data[0]) > 0:
                        for i in range(0, len(data), 4):
                            self.info_stream(data[0][i], data[1][i])
                            timestamp = datetime.strptime(data[1][i],
                                                          '%Y-%m-%d '
                                                          '%H:%M:%S.%f')
                            timestamp = float(timestamp.strftime('%s.%f'))
                            hr = data[0][i]
                            acc_x = data[0][i + 1]
                            acc_y = data[0][i + 2]
                            acc_z = data[0][i + 3]
                            datapoint = np.array((timestamp, hr, acc_x,
                                                  acc_y, acc_z))
                            self.register_datapoint(datapoint)
                except (ConnectionFailed, DevFailed, AttributeError):
                    self.info_stream('The Source seems to be down.')
            time.sleep(self.polling_frequency)


HealthMonitorServer.word_size = 5
HealthMonitorServer.window_factor = 2
HealthMonitorServer.lead_window_factor = 2
HealthMonitorServer.lag_window_factor = 4
HealthMonitorServer.resolution = 1000
HealthMonitorServer.conn_str = 'sqlite://'
HealthMonitorServer.polling_frequency = 2


if __name__ == '__main__':
    print('Reading configuration file')
    config = ConfigParser.RawConfigParser()
    dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
    cfg_filename = os.path.join(dirname, 'health_monitor.cfg')
    config.read(cfg_filename)

    word_size = config.getint('Detector', 'word_size')
    HealthMonitorServer.word_size = word_size

    window_factor = config.getint('Detector', 'window_factor')
    HealthMonitorServer.window_factor = window_factor

    lead_window_factor = config.getint('Detector', 'lead_window_factor')
    HealthMonitorServer.lead_window_factor = lead_window_factor

    lag_window_factor = config.getint('Detector', 'lag_window_factor')
    HealthMonitorServer.lag_window_factor = lag_window_factor

    resolution = config.getint('Monitor', 'resolution')
    HealthMonitorServer.resolution = resolution

    conn_str = config.get('Monitor', 'conn_str')
    HealthMonitorServer.conn_str = conn_str

    source_addresses = config.get('Monitor', 'source_addresses').split(';')
    HealthMonitorServer._source_addresses = source_addresses

    polling_frequency = config.getint('Monitor', 'polling_frequency')
    HealthMonitorServer.polling_frequency = polling_frequency

    run([HealthMonitorServer])
