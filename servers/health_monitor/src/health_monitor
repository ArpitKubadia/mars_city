#!/usr/bin/env python

from __future__ import division, print_function

import ConfigParser
import json
from multiprocessing import Process, Event
import os
import sys
import time

from PyTango import ConnectionFailed, DevFailed, AttrWriteType, AttrQuality
from PyTango import DevState, DevVarLongStringArray, DeviceProxy
from PyTango import DevVarDoubleStringArray
from PyTango import NonSupportedFeature, CommunicationFailed
from PyTango.server import Device, DeviceMeta, attribute, DispLevel
from PyTango.server import run, command
from dateutil.parser import parse as dateutil_parse

from health_monitor import HealthMonitor
from utils import datetimehandler


class HealthMonitorServer(Device):
    __metaclass__ = DeviceMeta

    source_addresses = attribute(label='Source Addresses', dtype=(str,),
                                 max_dim_x=100000,
                                 display_level=DispLevel.OPERATOR,
                                 access=AttrWriteType.READ,
                                 doc='Source Addresses')

    source_names = attribute(label='Source Names',
                             dtype=(str,),
                             max_dim_x=100000,
                             display_level=DispLevel.OPERATOR,
                             access=AttrWriteType.READ,
                             doc='Source Names')

    source_sexes = attribute(label='Source Sexes',
                             dtype=(str,),
                             max_dim_x=100000,
                             display_level=DispLevel.OPERATOR,
                             access=AttrWriteType.READ,
                             doc='Source Sexes')

    def read_source_addresses(self):
        self.log_function('read_source_addresses(%s)' % self._source_addresses)
        return self._source_addresses, time.time(), AttrQuality.ATTR_VALID

    def read_source_names(self):
        self.log_function('source_names(%s)' % self._source_names)
        return self._source_names

    def read_source_sexes(self):
        self.log_function('source_sexes(%s)' % self._source_sexes)
        return self._source_sexes

    @command(dtype_in=DevVarLongStringArray,
             doc_in="""Get alarms from params[1][0] source and
                       params[1][1] variable for
                       the last params[0][0] seconds""",
             dtype_out=DevVarDoubleStringArray)
    def get_alarms(self, params):
        period, source, var_name = params[0][0], params[1][0], params[1][1]
        self.log_function('get_alarms(%s, %s, %s)' %
                          (period, source, var_name))
        alarms = self.health_mon.get_alarms(period, source, var_name)
        if alarms:
            ret_val = [(a.alarm_lvl,
                        a.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f'))
                       for a in alarms]
            ret_val = zip(*ret_val)
        else:
            ret_val = [[], []]
        return ret_val

    @command(dtype_in=int,
             doc_in="""Get alarms from all sources variables for
                       the last period seconds""",
             dtype_out=str)
    def get_all_alarms(self, period):
        self.log_function('get_all_alarms(%s)' % period)
        alarms = self.health_mon.get_alarms(period)
        alarms = {addr:
                        {attr:
                                [(a.timestamp, a.alarm_lvl)
                                 for a in alarms
                                 if a.kind == attr and a.source_id == addr]
                         for attr in self._source_attributes}
                  for addr in self._source_addresses}

        return json.dumps(alarms, default=datetimehandler)

    def __del__(self):
        self.stop_polling.set()

    def init_device(self):
        # if self.log_function is not defined, then set it as Tango's log
        try:
            self.log_function('Initializing device')
        except:
            self.log_function = self.info_stream
            self.log_function('Initializing device')

        self.health_mon = HealthMonitor(
                                    sources=self._source_addresses,
                                    word_size=self.word_size,
                                    window_factor=self.window_factor,
                                    lead_window_factor=self.lead_window_factor,
                                    lag_window_factor=self.lag_window_factor,
                                    conn_str=self.conn_str,
                                    ecg_v1_order=self.ecg_v1_order,
                                    ecg_v1_lowcut=self.ecg_v1_lowcut,
                                    ecg_v1_highcut=self.ecg_v1_highcut,
                                    ecg_v1_min_std=self.ecg_v1_min_std,
                                    ecg_v1_min_order=self.ecg_v1_min_order,
                                    ecg_v1_buffer_len=self.ecg_v1_buffer_len
                                        )
        self.stop_polling = Event()
        Process(target=self._poll_sources).start()
        self.set_state(DevState.ON)
        self.log_function('Finished initializing device')

    def _get_source_data(self, proxy, address):
        try:
            params = json.dumps({'period': self.polling_frequency})
            data = json.loads(proxy.get_data(params))
            data = {k: [(dateutil_parse(i[0]), i[1]) for i in v]
                    for k, v in data.iteritems()}
        except (NonSupportedFeature, ConnectionFailed,
                CommunicationFailed, DevFailed) as e:
            self.log_function('Problem when retrieving attribute %s '
                              ' from source %s: %s. Setting %s to np.nan' %
                              (attr, address, e, attr))
            data[attr] = []
        self.health_mon.process_source_data(address, **data)

    def _poll_sources(self):
        self.log_function('Polling from: %s' % self._source_addresses)
        while not self.stop_polling.is_set():
            for address in self._source_addresses:
                try:
                    proxy = DeviceProxy(address)
                except (ConnectionFailed, DevFailed, AttributeError) as e:
                    self.log_function('The Source %s seems to be down: %s' %
                                      (address, e.message))
                self._get_source_data(proxy, address)
            time.sleep(self.polling_frequency)


if __name__ == '__main__':
    print('Reading configuration file')
    config = ConfigParser.RawConfigParser()
    dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
    cfg_filename = os.path.join(dirname, 'health_monitor.cfg')
    config.read(cfg_filename)

    word_size = config.getint('Detector', 'word_size')
    HealthMonitorServer.word_size = word_size

    window_factor = config.getint('Detector', 'window_factor')
    HealthMonitorServer.window_factor = window_factor

    lead_window_factor = config.getint('Detector', 'lead_window_factor')
    HealthMonitorServer.lead_window_factor = lead_window_factor

    lag_window_factor = config.getint('Detector', 'lag_window_factor')
    HealthMonitorServer.lag_window_factor = lag_window_factor

    conn_str = config.get('Monitor', 'conn_str')
    HealthMonitorServer.conn_str = conn_str

    src_addrs = config.get('Monitor', 'source_addresses').split(';')
    HealthMonitorServer._source_addresses = src_addrs

    src_names = config.get('Monitor', 'source_names').split(';')
    HealthMonitorServer._source_names = src_names

    src_sexes = config.get('Monitor', 'source_sexes').split(';')
    HealthMonitorServer._source_sexes = src_sexes

    src_attr = []
    if src_addrs:
        proxy = DeviceProxy(src_addrs[0])
        src_attr = [attr.name for attr in proxy.attribute_list_query()
                    if attr.name not in ('State', 'Status')]
    print("Source's attributes: %s" % src_attr)
    HealthMonitorServer._source_attributes = src_attr

    polling_freq = config.getint('Monitor', 'polling_frequency')
    HealthMonitorServer.polling_frequency = polling_freq

    ecg_v1_order = config.getint('SignalProcessing', 'ecg_v1_order')
    HealthMonitorServer.ecg_v1_order = ecg_v1_order
    ecg_v1_lowcut = config.getfloat('SignalProcessing', 'ecg_v1_lowcut')
    HealthMonitorServer.ecg_v1_lowcut = ecg_v1_lowcut
    ecg_v1_highcut = config.getfloat('SignalProcessing', 'ecg_v1_highcut')
    HealthMonitorServer.ecg_v1_highcut = ecg_v1_highcut
    ecg_v1_min_std = config.getfloat('SignalProcessing', 'ecg_v1_min_std')
    HealthMonitorServer.ecg_v1_min_std = ecg_v1_min_std
    ecg_v1_min_order = config.getfloat('SignalProcessing', 'ecg_v1_min_order')
    HealthMonitorServer.ecg_v1_min_order = ecg_v1_min_order
    ecg_v1_buffer_len = config.getint('SignalProcessing', 'ecg_v1_buffer_len')
    HealthMonitorServer.ecg_v1_buffer_len = ecg_v1_buffer_len

    HealthMonitorServer.log_function = print

    run([HealthMonitorServer])
