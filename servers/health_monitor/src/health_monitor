#!/usr/bin/env python

from __future__ import division, print_function

import ConfigParser
from datetime import datetime
import os
import sys
from threading import Thread, Event
import time

from PyTango import ConnectionFailed, DevFailed, AttrWriteType, AttrQuality
from PyTango import DevState, DevVarLongStringArray, DeviceProxy
from PyTango import NonSupportedFeature, CommunicationFailed
from PyTango.server import Device, DeviceMeta, attribute, DispLevel
from PyTango.server import run, command

from health_monitor import HealthMonitor
import numpy as np


class HealthMonitorServer(Device):
    __metaclass__ = DeviceMeta

    src_addrs = attribute(label='Source Addresses', dtype=(str,),
                                 display_level=DispLevel.OPERATOR,
                                 access=AttrWriteType.READ,
                                 doc='Source Addresses')

    def read_source_addresses(self):
        self.log_function('read_source_addresses(%s, %s)',
                         self.source_id, self.name)
        return self._source_addresses, time.time(), AttrQuality.ATTR_VALID

    @command(dtype_in=DevVarLongStringArray,
             doc_in="Get alarms from all the sources for "
                    "the last [period] seconds",
             dtype_out=DevVarLongStringArray)
    def get_alarms(self, params):
        period, source = params[0]
        alarms = self.health_mon.get_alarms(period, source)
        if alarms:
            ret_val = [(a.alarm_lvl,
                        a.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f'))
                       for a in alarms]
            ret_val = zip(*ret_val)
        else:
            ret_val = [[], []]
        return ret_val

    def __del__(self):
        self.stop_polling.set()

    def init_device(self):
        # if self.log_function is not defined, then set it as Tango's log
        try:
            self.log_function('Initializing device')
        except:
            self.log_function = self.info_stream
            self.log_function('Initializing device')

        self.health_mon = HealthMonitor(
                                    sources=self._source_addresses,
                                    word_size=self.word_size,
                                    window_factor=self.window_factor,
                                    lead_window_factor=self.lead_window_factor,
                                    lag_window_factor=self.lag_window_factor,
                                    resolution=self.resolution,
                                    conn_str=self.conn_str
                                        )
        self.stop_polling = Event()
        Thread(target=self._poll_sources).start()
        self.set_state(DevState.ON)
        self.log_function('Finished initializing device')

    def _get_source_data(self, address):
        proxy = DeviceProxy(address)
        data = {}
        for attr, poll_freq in self._source_attributes:
            try:
                # depth is the amount of datapoints to retrieve,
                # polling_frequency is in secs, and poll_freq
                # (of the attribute) is in ms.
                # so what's below should retrieve all datapoints since
                # last polling cycle
                depth = (self.polling_frequency * 1000) / poll_freq
                # get the things I really need
                data[attr] = [(d.time.todatetime(), d.value)
                              for d in proxy.attribute_history(attr, depth)]
            except (NonSupportedFeature, ConnectionFailed,
                    CommunicationFailed, DevFailed) as e:
                self.log_function('Problem when retrieving attribute %s '
                                  ' from source %s: %s. Setting %s to np.nan' %
                                  (attr, address, e, attr))
                data[attr] = []

        self.health_mon.register_datapoints(address, **data)

    def _poll_sources(self):
        self.log_function('Polling from: %s' % self._source_addresses)
        while not self.stop_polling.is_set():
            for address in self._source_addresses:
                try:
                    self._get_source_data(address)
                except (ConnectionFailed, DevFailed, AttributeError) as e:
                    self.log_function('The Source %s seems to be down: %s' %
                                      (address, e))
            time.sleep(self.polling_frequency)


HealthMonitorServer.word_size = 5
HealthMonitorServer.window_factor = 2
HealthMonitorServer.lead_window_factor = 2
HealthMonitorServer.lag_window_factor = 4
HealthMonitorServer.resolution = 1000
HealthMonitorServer.conn_str = 'sqlite://'
HealthMonitorServer.polling_frequency = 2


if __name__ == '__main__':
    print('Reading configuration file')
    config = ConfigParser.RawConfigParser()
    dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
    cfg_filename = os.path.join(dirname, 'health_monitor.cfg')
    config.read(cfg_filename)

    word_size = config.getint('Detector', 'word_size')
    HealthMonitorServer.word_size = word_size

    window_factor = config.getint('Detector', 'window_factor')
    HealthMonitorServer.window_factor = window_factor

    lead_window_factor = config.getint('Detector', 'lead_window_factor')
    HealthMonitorServer.lead_window_factor = lead_window_factor

    lag_window_factor = config.getint('Detector', 'lag_window_factor')
    HealthMonitorServer.lag_window_factor = lag_window_factor

    resolution = config.getint('Monitor', 'resolution')
    HealthMonitorServer.resolution = resolution

    conn_str = config.get('Monitor', 'conn_str')
    HealthMonitorServer.conn_str = conn_str

    src_addrs = config.get('Monitor', 'src_addrs').split(';')
    HealthMonitorServer._source_addresses = src_addrs

    src_attr = []
    if src_addrs:
        proxy = DeviceProxy(src_addrs[0])
        for attr in proxy.attribute_list_query():
            src_attr.append([attr.name,
                             proxy.get_attribute_poll_period(attr.name)])
    HealthMonitorServer._source_attributes = src_attr

    polling_freq = config.getint('Monitor', 'polling_freq')
    HealthMonitorServer.polling_frequency = polling_freq

    HealthMonitorServer.log_function = print

    run([HealthMonitorServer])
