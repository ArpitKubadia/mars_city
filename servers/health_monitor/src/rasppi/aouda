#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''Demo power supply tango device server'''

from __future__ import division, print_function

import ConfigParser
import os
import sys
import time

from PyTango import AttrQuality, AttrWriteType, DispLevel, DevState
from PyTango.server import Device, DeviceMeta, attribute, run
from aouda import Aouda
import numpy.linalg as lnp


class AoudaServer(Device):
    __metaclass__ = DeviceMeta
#     acceleration = attribute(label='Acceleration', dtype=(float,),
#                              max_dim_x=3,
#                              display_level=DispLevel.OPERATOR,
#                              access=AttrWriteType.READ,
#                              unit='(m/s2, m/s2, m/s2)', format='8.4f',
#                              polling_period=250,
#                              doc='Body acceleration vector')
    acc_magn = attribute(label='Acceleration Magnitude', dtype=float,
                         display_level=DispLevel.OPERATOR,
                         access=AttrWriteType.READ,
                         unit='m/s2', format='8.4f',
                         polling_period=250,
                         doc="Body acceleration vector's magnitude")
    air_flow = attribute(label='Air Flow', dtype=float,
                         display_level=DispLevel.OPERATOR,
                         access=AttrWriteType.READ,
                         unit='m3/s', format='8.4f',
                         polling_period=500,
                         doc='Air flow volume')
    ecg_v1 = attribute(label='ECG V1', dtype=float,
                       display_level=DispLevel.OPERATOR,
                       access=AttrWriteType.READ,
                       unit='V', format='8.4f',
                       polling_period=5,
                       doc='ECG V1 electrode')
    heart_rate = attribute(label='Heart Rate', dtype=float,
                           display_level=DispLevel.OPERATOR,
                           access=AttrWriteType.READ,
                           unit='bpm', format='8.4f',
                           polling_period=500,
                           doc='Heart rate')
    o2 = attribute(label='Oxigen', dtype=float,
                   display_level=DispLevel.OPERATOR,
                   access=AttrWriteType.READ,
                   unit='SpO2', format='8.4f',
                   polling_period=500,
                   doc='Saturation of peripheral oxygen')
    temperature = attribute(label='Temperature', dtype=float,
                            display_level=DispLevel.OPERATOR,
                            access=AttrWriteType.READ,
                            unit='Â°C', format='8.4f',
                            polling_period=2000,
                            doc='Body temperature')

    def init_device(self):
        Device.init_device(self)
        self.info_stream('Initializing device')
        self.aouda = Aouda(simulate=AoudaServer.simulate_data,
                           air_flow_threshold=AoudaServer.air_flow_threshold,
                           shift_data=AoudaServer.cycle_through_data)
        self.set_state(DevState.ON)
        self.info_stream('Finished initializing device')

#
#     def read_acceleration(self):
#         self.acceleration = acceleration = self.aouda.read_acceleration()
#         self.info_stream('read_acceleration(%.3f)' %
#                          (acceleration))
#         return self.acceleration, time.time(), AttrQuality.ATTR_VALID

    def read_acc_magn(self):
        self.acc_magn = acc_magn = lnp.norm(self.aouda.read_acceleration())
        self.info_stream('read_acc_magn(%.3f)' % acc_magn)
        return self.acc_magn, time.time(), AttrQuality.ATTR_VALID

    def read_air_flow(self):
        self.air_flow = air_flow = self.aouda.read_air_flow()
        self.info_stream('read_air_flow(%.3f)' % air_flow)
        return self.air_flow, time.time(), AttrQuality.ATTR_VALID

    def read_ecg_v1(self):
        self.ecg_v1 = ecg_v1 = self.aouda.read_ecg_v1()
        self.info_stream('read_ecg_v1(%.3f)' % ecg_v1)
        return self.ecg_v1, time.time(), AttrQuality.ATTR_VALID

    def read_heart_rate(self):
        self.heart_rate = heart_rate = self.aouda.read_heart_rate()
        self.info_stream('read_heart_rate(%.3f)' % heart_rate)
        return self.heart_rate, time.time(), AttrQuality.ATTR_VALID

    def read_o2(self):
        self.o2 = o2 = self.aouda.read_o2()
        self.info_stream('read_o2(%.3f)' % o2)
        return o2, time.time(), AttrQuality.ATTR_VALID

    def read_temperature(self):
        self.temperature = temperature = self.aouda.read_temperature()
        self.info_stream('read_temperature(%.3f)' % temperature)
        return self.temperature, time.time(), AttrQuality.ATTR_VALID

if __name__ == '__main__':
    print('Reading configuration file')
    config = ConfigParser.RawConfigParser()
    dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
    cfg_filename = os.path.join(dirname, 'aouda.cfg')
    config.read(cfg_filename)
    print(sys.argv)
    if 'simulate_data' in sys.argv:
        AoudaServer.simulate_data = True
    else:
        AoudaServer.simulate_data = config.getboolean('Data',
                                                      'simulate_data')
    AoudaServer.cycle_through_data = config.getboolean('Data',
                                                       'cycle_through_data')
    AoudaServer.air_flow_threshold = config.getint('AirFlow',
                                                   'air_flow_threshold')

    run([AoudaServer])
