#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''Demo power supply tango device server'''

from __future__ import division, print_function

import ConfigParser
import os
import sys
import time

from PyTango import AttrQuality, AttrWriteType, DispLevel, DevState
from PyTango.server import Device, DeviceMeta, attribute, run, device_property
from aouda import Aouda, NoDataAvailableError
import numpy.linalg as lnp


class AoudaServer(Device):
    __metaclass__ = DeviceMeta
    ecg_v1 = attribute(label='ECG V1', dtype=float,
                       display_level=DispLevel.OPERATOR,
                       access=AttrWriteType.READ,
                       unit='V', format='8.4f',
                       polling_period=5,
                       doc='ECG V1 electrode')
    ecg_v2 = attribute(label='ECG V2', dtype=float,
                       display_level=DispLevel.OPERATOR,
                       access=AttrWriteType.READ,
                       unit='V', format='8.4f',
                       polling_period=5,
                       doc='ECG V2 electrode')
    o2 = attribute(label='Oxigen', dtype=float,
                   display_level=DispLevel.OPERATOR,
                   access=AttrWriteType.READ,
                   unit='SpO2', format='8.4f',
                   polling_period=500,
                   doc='Saturation of peripheral oxygen')
    temperature = attribute(label='Temperature', dtype=float,
                            display_level=DispLevel.OPERATOR,
                            access=AttrWriteType.READ,
                            unit='Â°C', format='8.4f',
                            polling_period=2000,
                            doc='Body temperature')
    air_flow = attribute(label='Air Flow', dtype=float,
                         display_level=DispLevel.OPERATOR,
                         access=AttrWriteType.READ,
                         unit='m3/s', format='8.4f',
                         polling_period=500,
                         doc='Air flow volume')
    heart_rate = attribute(label='Heart Rate', dtype=float,
                           display_level=DispLevel.OPERATOR,
                           access=AttrWriteType.READ,
                           unit='bpm', format='8.4f',
                           polling_period=500,
                           doc='Heart rate')
    acceleration = attribute(label='Acceleration', dtype=(float,),
                             max_dim_x=3,
                             display_level=DispLevel.OPERATOR,
                             access=AttrWriteType.READ,
                             unit='(m/s2, m/s2, m/s2)', format='8.4f',
                             polling_period=250,
                             doc='Body acceleration vector')
    acc_magn = attribute(label='Acceleration Magnitude', dtype=float,
                         display_level=DispLevel.OPERATOR,
                         access=AttrWriteType.READ,
                         unit='m/s2', format='8.4f',
                         polling_period=250,
                         doc="Body acceleration vector's magnitude")

    source_id = device_property(dtype=str, default_value='')
    name = device_property(dtype=str, default_value='NN')

    def init_device(self):
        Device.init_device(self)
        self.info_stream('Initializing device(%s, %s)',
                         self.source_id, self.name)
        self.aouda = Aouda(simulate=AoudaServer.simulate_data,
                           air_flow_threshold=AoudaServer.air_flow_threshold,
                           shift_data=AoudaServer.cycle_through_data)
        self.set_state(DevState.ON)
        self.info_stream('Finished initializing device(%s, %s)',
                         self.source_id, self.name)

    def read_ecg_v1(self):
        self.ecg_v1 = ecg_v1 = self.aouda.read_ecg_v1()
        self.info_stream('read_ecg_v1(%s, %s, %.3f)',
                         self.source_id, self.name, ecg_v1)
        return self.ecg_v1, time.time(), AttrQuality.ATTR_VALID

    def get_ecg_v1(self):
        self.ecg_v1 = ecg_v1 = self.aouda.read_ecg_v1()
        self.info_stream('get_ecg_v1(%s, %s, %.3f)',
                         self.source_id, self.name, ecg_v1)
        return ecg_v1

    def read_ecg_v2(self):
        self.ecg_v2 = ecg_v2 = self.aouda.read_ecg_v2()
        self.info_stream('read_ecg_v2(%s, %s, %.3f)',
                         self.source_id, self.name, ecg_v2)
        return self.ecg_v2, time.time(), AttrQuality.ATTR_VALID

    def read_o2(self):
        self.o2 = o2 = self.aouda.read_o2()
        self.info_stream('read_o2(%s, %s, %.3f)',
                         self.source_id, self.name, o2)
        return o2, time.time(), AttrQuality.ATTR_VALID

    def read_temperature(self):
        self.temperature = temperature = self.aouda.read_temperature()
        self.info_stream('read_temperature(%s, %s, %.3f)',
                         self.source_id, self.name, temperature)
        return self.temperature, time.time(), AttrQuality.ATTR_VALID

    def read_air_flow(self):
        self.air_flow = air_flow = self.aouda.read_air_flow()
        self.info_stream('read_air_flow(%s, %s, %.3f)',
                         self.source_id, self.name, air_flow)
        return self.air_flow, time.time(), AttrQuality.ATTR_VALID

    def read_heart_rate(self):
        self.heart_rate = heart_rate = self.aouda.read_heart_rate()
        self.info_stream('read_heart_rate(%s, %s, %.3f)',
                         self.source_id, self.name, heart_rate)
        return self.heart_rate, time.time(), AttrQuality.ATTR_VALID

    def read_acceleration(self):
        self.acceleration = acceleration = self.aouda.read_acceleration()
        self.info_stream('read_acceleration(%s, %s, %s)' %
                         (self.source_id, self.name, acceleration))
        return self.acceleration, time.time(), AttrQuality.ATTR_VALID

    def read_acc_magn(self):
        self.acc_magn = acc_magn = lnp.norm(self.aouda.read_acceleration())
        self.info_stream('read_acc_magn(%s, %s, %s)' %
                         (self.source_id, self.name, acc_magn))
        return self.acc_magn, time.time(), AttrQuality.ATTR_VALID

if __name__ == '__main__':
    print('Reading configuration file')
    config = ConfigParser.RawConfigParser()
    dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
    cfg_filename = os.path.join(dirname, 'aouda.cfg')
    config.read(cfg_filename)
    AoudaServer.simulate_data = config.getboolean('Data',
                                                  'simulate_data')
    AoudaServer.cycle_through_data = config.getboolean('Data',
                                                       'cycle_through_data')
    AoudaServer.air_flow_threshold = config.getint('AirFlow',
                                                   'air_flow_threshold')

    run([AoudaServer])
