#!/usr/bin/env python

from __future__ import division, print_function
import sys
from datetime import datetime
from collections import defaultdict

import os
from threading import Thread, Event
from time import sleep
import ConfigParser

import PyTango
from PyTango import ArgType, DeviceProxy, ConnectionFailed, DevFailed
import numpy as np

from hr_monitor import HRMonitor

performance = defaultdict(list)


class PyDsExpClass(PyTango.DeviceClass):
    cmd_list = {
        'register_datapoint': [[ArgType.DevVarDoubleArray,
                                "[timestamp(%s.%f), hr, acc_x, acc_y, acc_z]"],
                               [ArgType.DevVoid]],

        'get_avg_hr': [[ArgType.DevLong, "Period"],
                       [ArgType.DevFloat,
                        "Average HR in last [Period] seconds"]],

        'get_avg_acc': [[ArgType.DevLong, "Period"],
                        [ArgType.DevFloat,
                         "Average acc in last [Period] seconds"]],

        'get_current_alarms': [[ArgType.DevLong, "Period"],
                               [ArgType.DevVarDoubleStringArray,
                                "Two arrays: alarm levels of the last [Period]"
                                + " seconds, and corresponding timestamps"]],
                }

    attr_list = {}

    def __init__(self, name):
        print('Constructing PyDsExpClass')
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")
        print('Finished constructing PyDsExpClass')


class PyDsExp(PyTango.Device_4Impl):

    word_size = 5
    window_factor = 2
    lead_window_factor = 2
    lag_window_factor = 4
    resolution = 1000
    conn_str = 'mysql+mysqldb://root@localhost/hr_monitor'
    aouda_address = 'C3/aouda/1'
    polling_frequency = 2

    def __init__(self, cl, name):
        print('Constructing PyDsExp')
        PyTango.Device_4Impl.__init__(self, cl, name)
        PyDsExp.init_device(self)
        print('Finished constructing PyDsExp')

    def __del__(self):
        self.stop_polling.set()

    def init_device(self):
        print('Initializing device')
        self.hr_mon = HRMonitor(word_size=PyDsExp.word_size,
                                window_factor=PyDsExp.window_factor,
                                lead_window_factor=PyDsExp.lead_window_factor,
                                lag_window_factor=PyDsExp.lag_window_factor,
                                resolution=PyDsExp.resolution,
                                conn_str=PyDsExp.conn_str)
        self.stop_polling = Event()
        Thread(target=self._poll_suit).start()
        self.set_state(PyTango.DevState.ON)
        print('Finished initializing device')

    def _poll_suit(self):
        print('Polling from: %s' % PyDsExp.aouda_address)
        proxy = DeviceProxy(PyDsExp.aouda_address)
        while not self.stop_polling.is_set():
            try:
                data = proxy.get_data(PyDsExp.polling_frequency)
                if len(data[0]) > 0:
                    for i in range(0, len(data), 4):
                        print(data[0][i], data[1][i])
                        timestamp = datetime.strptime(data[1][i],
                                                      '%Y-%m-%d %H:%M:%S.%f')
                        timestamp = float(timestamp.strftime('%s.%f'))
                        hr = data[0][i]
                        acc_x = data[0][i + 1]
                        acc_y = data[0][i + 2]
                        acc_z = data[0][i + 3]
                        datapoint = np.array((timestamp, hr, acc_x,
                                              acc_y, acc_z))
                        self.register_datapoint(datapoint)
            except (ConnectionFailed, DevFailed):
                print("The Aouda Server seems to be down.")
            sleep(PyDsExp.polling_frequency)

############## BEGIN register_datapoint #######################################
    def is_register_datapoint_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    def register_datapoint(self, args):
        timestamp = datetime.fromtimestamp(args[0])
        new_args = args.tolist()
        new_args[0] = timestamp
        self.hr_mon.register_datapoint(*new_args)
############### END register_datapoint ########################################

############### BEGIN get_avg_hr ##############################################
    def is_get_avg_hr_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    def get_avg_hr(self, period):
        return self.hr_mon.get_avg_hr(period)
############### END get_avg_hr ################################################

############### BEGIN get_acc_avg #############################################
    def is_get_avg_acc_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    def get_avg_acc(self, period):
        return self.hr_mon.get_avg_acc(period)
############### END get_acc_avg ###############################################

############### BEGIN get_current_alarms ######################################
    def is_get_current_alarms_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    def get_current_alarms(self, period):
        global performance
        alarms = self.hr_mon.get_current_alarms(period)
        if alarms:
            ret_val = [(a.alarm_lvl,
                        a.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f'))
                       for a in alarms]
            ret_val = zip(*ret_val)
        else:
            ret_val = [[], []]
        return ret_val
############### END get_current_alarms ########################################


print("Reading configuration file")
config = ConfigParser.RawConfigParser()
dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
cfg_filename = os.path.join(dirname, 'hr_monitor.cfg')
config.read(cfg_filename)
PyDsExp.word_size = config.getint('Detector', 'word_size')
PyDsExp.window_factor = config.getint('Detector', 'window_factor')
PyDsExp.lead_window_factor = config.getint('Detector', 'lead_window_factor')
PyDsExp.lag_window_factor = config.getint('Detector', 'lag_window_factor')

PyDsExp.resolution = config.getint('Monitor', 'resolution')
PyDsExp.conn_str = config.get('Monitor', 'conn_str')
PyDsExp.aouda_address = config.get('Monitor', 'aouda_address')
PyDsExp.polling_frequency = config.getint('Monitor', 'polling_frequency')


if __name__ == '__main__':
    print("Parsing command line arguments")
    util = PyTango.Util(sys.argv)
    print("Setting up Server")
    util.add_class(PyDsExpClass, PyDsExp)

    print("Getting ancillary classes instances")
    U = PyTango.Util.instance()
    print("Initializing Server")
    U.server_init()
    print("Running Server")
    U.server_run()
    print("Exiting")
    U.server_cleanup()
