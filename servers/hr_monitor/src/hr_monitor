#!/usr/bin/env python

from __future__ import division, print_function
import sys
from datetime import datetime
from time import time
from collections import defaultdict

import PyTango
from PyTango import ArgType

from hr_monitor import HRMonitor

performance = defaultdict(list)


def timeit(func):
    return func
    def wrapper(*arg, **kw):
        global performance
        t1 = time()
        res = func(*arg, **kw)
        t2 = time()
        #print("%s: %s" % (func.func_name, t2 - t1))
        performance[func.func_name].append(t2 - t1)
        return res
    return wrapper


class PyDsExpClass(PyTango.DeviceClass):
    cmd_list = {
        'register_datapoint': [[ArgType.DevVarDoubleArray,
                                "[timestamp(%s.%f), hr, acc_x, acc_y, acc_z]"],
                               [ArgType.DevVoid]],

        'get_avg_hr': [[ArgType.DevLong, "Period"],
                       [ArgType.DevFloat,
                        "Average HR in last [Period] seconds"]],

        'get_avg_acc': [[ArgType.DevLong, "Period"],
                        [ArgType.DevFloat,
                         "Average acc in last [Period] seconds"]],

        'get_current_alarms': [[ArgType.DevLong, "Period"],
                               [ArgType.DevVarDoubleStringArray,
                                "Two arrays: alarm levels of the last [Period]"
                                + " seconds, and corresponding timestamps"]],
                }

    attr_list = {}

    def __init__(self, name):
        print('Constructing PyDsExpClass')
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")
        print('Finished constructing PyDsExpClass')


class PyDsExp(PyTango.Device_4Impl):

    def __init__(self, cl, name):
        print('Constructing PyDsExp')
        PyTango.Device_4Impl.__init__(self, cl, name)
        PyDsExp.init_device(self)
        print('Finished constructing PyDsExp')

############## BEGIN register_datapoint #######################################
    def is_register_datapoint_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    @timeit
    def register_datapoint(self, args):
        timestamp = datetime.fromtimestamp(args[0])
        new_args = args.tolist()
        new_args[0] = timestamp
        self.hr_mon.register_datapoint(*new_args)
#        proc = Process(target=self.hr_mon.register_datapoint,
#                       args=new_args)
#        proc.start()
############### END register_datapoint ########################################

############### BEGIN get_avg_hr ##############################################
    def is_get_avg_hr_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    @timeit
    def get_avg_hr(self, period):
        return self.hr_mon.get_avg_hr(period)
############### END get_avg_hr ################################################

############### BEGIN get_acc_avg #############################################
    def is_get_avg_acc_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    @timeit
    def get_avg_acc(self, period):
        return self.hr_mon.get_avg_acc(period)
############### END get_acc_avg ###############################################

############### BEGIN get_current_alarms ######################################
    def is_get_current_alarms_allowed(self):
        return self.get_state() == PyTango.DevState.ON

    @timeit
    def get_current_alarms(self, period):
        global performance
        alarms = self.hr_mon.get_current_alarms(period)
        if alarms:
            ret_val = [(a.alarm_lvl,
                        a.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f'))
                       for a in alarms]
            ret_val = zip(*ret_val)
        else:
            ret_val = [[], []]
        return ret_val
############### END get_current_alarms ########################################

    def init_device(self):
        print('Initializing device')
        self.hr_mon = HRMonitor()
        self.set_state(PyTango.DevState.ON)
        print('Finished initializing device')


if __name__ == '__main__':
    print("Parsing command line arguments")
    util = PyTango.Util(sys.argv)
    print("Setting up Server")
    util.add_class(PyDsExpClass, PyDsExp)

    print("Getting ancillary classes instances")
    U = PyTango.Util.instance()
    print("Initializing Server")
    U.server_init()
    print("Running Server")
    U.server_run()
    print("Exiting")
