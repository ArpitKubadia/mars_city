# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Mon Sep  2 12:11:11 2013
from __future__ import division, print_function

from time import sleep
from datetime import datetime
from threading import current_thread

import wx
from PyTango import DeviceProxy


from PlotCanvas import PlotCanvas
from Timer import Timer

# begin wxGlade: extracode

# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.alarm_plt = PlotCanvas(self, -1)
        self.timestamp_sld = wx.Slider(self, -1, 0, 0, 10)
        self.avg_hr_title_lbl = wx.StaticText(self, -1, "Current avg. HR:")
        self.avg_hr_lbl = wx.StaticText(self, -1, "NA")
        self.avg_acc_title_lbl = wx.StaticText(self, -1, "Current avg. Acc.:")
        self.avg_acc_lbl = wx.StaticText(self, -1, "NA")
        self.anomaly_lvl_title_lbl = wx.StaticText(self, -1, "Anomaly level:")
        self.anomaly_lvl_lbl = wx.StaticText(self, -1, "NA")
        self.collect_btn = wx.Button(self, -1, "Collect data")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMMAND_SCROLL, self.timestamp_sld_scroll,
                  self.timestamp_sld)
        self.Bind(wx.EVT_BUTTON, self.collect_btn_click, self.collect_btn)
        # end wxGlade
        self.timer_thread = Timer(target=self.timer_tick)
        self.proxy = DeviceProxy('C3/hr_monitor/1')
        self.alarms = set()

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("HRMonitor GUI")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(3, 2, 0, 0)
        sizer_1.Add(self.alarm_plt, 1, wx.EXPAND, 0)
        sizer_1.Add(self.timestamp_sld, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.avg_hr_title_lbl, 0, 0, 0)
        grid_sizer_2.Add(self.avg_hr_lbl, 0, 0, 0)
        grid_sizer_2.Add(self.avg_acc_title_lbl, 0, 0, 0)
        grid_sizer_2.Add(self.avg_acc_lbl, 0, 0, 0)
        grid_sizer_2.Add(self.anomaly_lvl_title_lbl, 0, 0, 0)
        grid_sizer_2.Add(self.anomaly_lvl_lbl, 0, 0, 0)
        sizer_2.Add(grid_sizer_2, 9, wx.EXPAND, 0)
        sizer_3.Add(self.collect_btn, 0, wx.ALL, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    # wxGlade: MainFrame.<event_handler>
    def timestamp_sld_scroll(self, event):
        print("Event handler `timestamp_sld_scroll' not implemented")
        event.Skip()

    # wxGlade: MainFrame.<event_handler>
    def collect_btn_click(self, event):
        if self.collect_btn.GetLabel() == "Stop collecting":
            self.collect_btn.SetLabel("Collect data")
            self.timer_thread.stop()
            del self.timer_thread
            self.timer_thread = Timer(target=self.timer_tick)
        else:
            self.collect_btn.SetLabel("Stop collecting")
            self.timer_thread.start()
        event.Skip()

    def timer_tick(self):
        timer = current_thread()
        while not timer.stopped():
            avg_hr = self.proxy.get_avg_hr(2)
            avg_acc = self.proxy.get_avg_acc(2)
            alarms = self.proxy.get_current_alarms(2)
            alarms[0], alarms[1] = alarms[1], alarms[0]
            alarms[0] = [float(datetime.strptime(x, '%Y-%m-%d %H:%M:%S.%f')
                                       .strftime('%s.%f'))
                         for x in alarms[0]]
            wx.CallAfter(self.avg_hr_lbl.SetLabel, str(avg_hr))
            wx.CallAfter(self.avg_acc_lbl.SetLabel, str(avg_acc))
            if len(alarms[0]) > 0:
                max_alarm = max(alarms[1])
            else:
                max_alarm = 'nan'
            wx.CallAfter(self.anomaly_lvl_lbl.SetLabel, str(max_alarm))
            self.alarms.update(zip(*alarms))
            data = sorted(self.alarms)
            if len(data) > 0:
                wx.CallAfter(self.alarm_plt.set_data, data)
                wx.CallAfter(self.alarm_plt.draw)
            sleep(2)

# end of class MainFrame
