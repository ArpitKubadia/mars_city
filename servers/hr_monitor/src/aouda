#!/usr/bin/env python

from __future__ import division, print_function
import sys
from collections import defaultdict

import PyTango
from PyTango import ArgType, AttrDataFormat, AttrWriteType

from aouda import Aouda

performance = defaultdict(list)


class PyDsExpClass(PyTango.DeviceClass):
    cmd_list = {
                'get_data': [[ArgType.DevLong, "Period"],
                             [ArgType.DevVarDoubleStringArray]],
                }

    attr_list = {
                 'heart_rate': [[PyTango.ArgType.DevFloat,
                                 PyTango.AttrDataFormat.SCALAR,
                                 PyTango.AttrWriteType.READ],
                                {'polling period': 2000}],
                 'acc_magn': [[PyTango.ArgType.DevFloat,
                               PyTango.AttrDataFormat.SCALAR,
                               PyTango.AttrWriteType.READ],
                              {'polling period': 2000}]
                 }

    def __init__(self, name):
        print('Constructing PyDsExpClass')
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("PyDsExpClass")
        print('Finished constructing PyDsExpClass')


class PyDsExp(PyTango.Device_4Impl):

    def __init__(self, cl, name):
        print('Constructing PyDsExp')
        PyTango.Device_4Impl.__init__(self, cl, name)
        PyDsExp.init_device(self)
        print('Finished constructing PyDsExp')

############## BEGIN get_data #################################################
    def is_get_data_allowed(self):
        return self.get_state() in (PyTango.DevState.ON,)

    def get_data(self, period):
        data = self.aouda.get_data(period)
        return data
############### END get_data ##################################################

############## BEGIN heart_rate #################################################
    def is_heart_rate_allowed(self, req_type):
        return self.get_state() in (PyTango.DevState.ON,)

    def read_heart_rate(self, the_att):
        self.heart_rate = heart_rate = self.aouda.read_heart_rate()
        print("read_heart_rate")
        the_att.set_value(heart_rate)
############### END heart_rate ##################################################

############## BEGIN acc_magn #################################################
    def is_acc_magn_allowed(self, req_type):
        return self.get_state() in (PyTango.DevState.ON,)

    def read_acc_magn(self, the_att):
        self.acc_magn = acc_magn = self.aouda.read_acc_magn()
        print("read_acc_magn")
        the_att.set_value(acc_magn)
############### END acc_magn ##################################################

    def init_device(self):
        print('Initializing device')
        self.aouda = Aouda(filename='tests/dataset.dat')
        self.set_state(PyTango.DevState.ON)
        print('Finished initializing device')


if __name__ == '__main__':
    print("Parsing command line arguments")
    util = PyTango.Util(sys.argv)
    print("Setting up Server")
    util.add_class(PyDsExpClass, PyDsExp)

    print("Getting ancillary classes instances")
    U = PyTango.Util.instance()
    print("Initializing Server")
    U.server_init()
    print("Running Server")
    U.server_run()
    print("Exiting")
