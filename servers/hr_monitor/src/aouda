#!/usr/bin/env python

from __future__ import division, print_function
import sys
import os
from datetime import datetime
import ConfigParser

import PyTango
from PyTango import ArgType, AttrDataFormat, AttrWriteType

from aouda import Aouda, NoDataAvailableError


class PyDsExpClass(PyTango.DeviceClass):
    cmd_list = {
                'get_data': [[ArgType.DevLong, "Period"],
                             [ArgType.DevVarDoubleStringArray]],
                }

    attr_list = {
                 'heart_rate': [[ArgType.DevFloat,
                                 AttrDataFormat.SCALAR,
                                 AttrWriteType.READ],
                                {'polling period': 2000}],
                 'acc_magn': [[ArgType.DevFloat,
                               AttrDataFormat.SCALAR,
                               AttrWriteType.READ],
                              {'polling period': 2000}]
                 }

    def __init__(self, name):
        print('Constructing PyDsExpClass')
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("PyDsExpClass")
        print('Finished constructing PyDsExpClass')


class PyDsExp(PyTango.Device_4Impl):

    def __init__(self, cl, name):
        print('Constructing PyDsExp')
        PyTango.Device_4Impl.__init__(self, cl, name)
        PyDsExp.init_device(self)
        print('Finished constructing PyDsExp')

    def init_device(self):
        print('Initializing device')
        if len(PyDsExp.data_file_path) == 0:
            dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
            dirname = os.path.join(dirname, 'data_tests')
            PyDsExp.data_file_path = os.path.join(dirname, 'dataset.dat')
        self.aouda = Aouda(filename=PyDsExp.data_file_path,
                           shift_data=PyDsExp.cycle_through_data)
        self.set_state(PyTango.DevState.ON)
        print('Finished initializing device')

############## BEGIN get_data #################################################
    def is_get_data_allowed(self):
        return self.get_state() in (PyTango.DevState.ON,)

    def get_data(self, period):
        """
        Returns an array with all datapoints in the last period seconds.
        The format is:
        [
         [hr1, acc_x1, acc_y1, acc_z1,
          hr2, acc_x2, acc_y2, acc_z2,
          ...
          hrN, acc_xN, acc_yN, acc_zN],
         [timestamp1, timestamp1, timestamp1, timestamp1,
          timestamp2, timestamp2, timestamp2, timestamp2,
          ...
          timestampN, timestampN, timestampN, timestampN],
        ]
        """
        try:
            data, _ = self.aouda.get_data(period)
            ret_val = [[], []]
            for dp in data:
                ret_val[0].append(dp.hr)
                ret_val[0].append(dp.acc_x)
                ret_val[0].append(dp.acc_y)
                ret_val[0].append(dp.acc_z)
                formatted_ts = dp.timestamp.strftime('%Y-%m-%d %H:%M:%S.%f')
                ret_val[1].extend([formatted_ts] * 4)
            return ret_val
        except NoDataAvailableError:
            print("No data available on dataset for %s seconds before %s."
                  % (period, datetime.now()))
            sys.exit()
############### END get_data ##################################################

############## BEGIN heart_rate ###############################################
    def is_heart_rate_allowed(self, req_type):
        return self.get_state() in (PyTango.DevState.ON,)

    def read_heart_rate(self, the_att):
        self.heart_rate = heart_rate = self.aouda.read_heart_rate()
        print("read_heart_rate")
        the_att.set_value(heart_rate)
############### END heart_rate ################################################

############## BEGIN acc_magn #################################################
    def is_acc_magn_allowed(self, req_type):
        return self.get_state() in (PyTango.DevState.ON,)

    def read_acc_magn(self, the_att):
        self.acc_magn = acc_magn = self.aouda.read_acc_magn()
        print("read_acc_magn")
        the_att.set_value(acc_magn)
############### END acc_magn ##################################################


print("Reading configuration file")
config = ConfigParser.RawConfigParser()
dirname = os.path.dirname(os.path.abspath(sys.argv[0]))
cfg_filename = os.path.join(dirname, 'aouda.cfg')
config.read(cfg_filename)
PyDsExp.cycle_through_data = config.getboolean('Data', 'cycle_through_data')
PyDsExp.data_file_path = config.get('Data', 'data_file_path')
if len(PyDsExp.data_file_path) > 0:
    PyDsExp.data_file_path = os.path.join(dirname, PyDsExp.data_file_path)


if __name__ == '__main__':
    print(sys.argv)
    print("Parsing command line arguments")
    util = PyTango.Util(sys.argv)
    print("Setting up Server")
    util.add_class(PyDsExpClass, PyDsExp)

    print("Getting ancillary classes instances")
    U = PyTango.Util.instance()
    print("Initializing Server")
    U.server_init()
    print("Running Server")
    U.server_run()
    print("Exiting")
