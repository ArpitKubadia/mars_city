#!/usr/bin/python
import sys
import json
import PyTango

from urllib import urlopen

class PyDevice(PyTango.DeviceClass):
    cmd_list = {}
    attr_type = [
        [PyTango.ArgType.DevFloat,
         PyTango.AttrDataFormat.SPECTRUM,
         PyTango.AttrWriteType.READ, 3],
         {'polling period' : 100}
    ]
    attr_list = {
        'skeleton_head' : attr_type,
        'skeleton_neck' : attr_type,
        'skeleton_left_shoulder' : attr_type,
        'skeleton_right_shoulder' : attr_type,
        'skeleton_left_elbow' : attr_type,
        'skeleton_right_elbow' : attr_type,
        'skeleton_left_hand' : attr_type,
        'skeleton_right_hand' : attr_type,
        'skeleton_torso' : attr_type,
        'skeleton_left_hip' : attr_type,
        'skeleton_right_hip' : attr_type,
        'skeleton_left_knee' : attr_type,
        'skeleton_right_knee' : attr_type,
        'skeleton_left_foot' : attr_type,
        'skeleton_right_foot' : attr_type
    }

    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TrackerDevice")


class PyTracker(PyTango.Device_4Impl):
    def __init__(self, cls, name):
        self.devices = {}
        PyTango.Device_4Impl.__init__(self, cls, name)
        self.device_name=sys.argv[1]
        self.info_stream('In Tracker.__init__')
        PyTracker.init_device(self)

    def read_skeleton_head(self, the_att):
        try:
            page = urlopen('http://192.168.1.104/Joints/' + self.device_name + '/joints.json')
            #print('after reading page')
            d = json.load(page)   
            #print('reading page', d)
        except Exception as e:
            the_att.set_value(self.skeleton_head)
            print(e)
            return
        self.skeleton_head = (d['Head']['x'], d['Head']['y'], d['Head']['z'])
        self.skeleton_neck = (d['ShoulderCenter']['x'],
                              ((d['ShoulderLeft']['y']+d['ShoulderRight']['y'])/2.0),
                              d['ShoulderCenter']['z'])
        self.skeleton_left_shoulder = (d['ShoulderLeft']['x'],
                                       d['ShoulderLeft']['y'],
                                       d['ShoulderLeft']['z'])
        self.skeleton_right_shoulder = (d['ShoulderRight']['x'],
                                        d['ShoulderRight']['y'],
                                        d['ShoulderRight']['z'])
        self.skeleton_left_elbow = (d['ElbowLeft']['x'], d['ElbowLeft']['y'],
                                    d['ElbowLeft']['z'])
        self.skeleton_right_elbow = (d['ElbowRight']['x'], d['ElbowRight']['y'],
                                     d['ElbowRight']['z'])
        self.skeleton_left_hand = (d['HandLeft']['x'], d['HandLeft']['y'],
                                   d['HandLeft']['z'])
        self.skeleton_right_hand = (d['HandRight']['x'], d['HandRight']['y'],
                                    d['HandRight']['z'])
        self.skeleton_torso = (d['Spine']['x'], d['Spine']['y'], d['Spine']['z'])
        self.skeleton_left_hip = (d['HipLeft']['x'], d['HipLeft']['y'],
                                  d['HipLeft']['z'])
        self.skeleton_right_hip = (d['HipRight']['x'], d['HipRight']['y'],
                                   d['HipRight']['z'])
        self.skeleton_left_knee = (d['KneeLeft']['x'], d['KneeLeft']['y'],
                                   d['KneeLeft']['z'])
        self.skeleton_right_knee = (d['KneeRight']['x'], d['KneeRight']['y'],
                                    d['KneeRight']['z'])
        self.skeleton_left_foot = (d['FootLeft']['x'], d['FootLeft']['y'],
                                   d['FootLeft']['z'])
        self.skeleton_right_foot = (d['FootRight']['x'], d['FootRight']['y'],
                                    d['FootRight']['z'])

        the_att.set_value(self.skeleton_head)

    def read_skeleton_neck(self, the_att):
        the_att.set_value(self.skeleton_neck)

    def read_skeleton_left_shoulder(self, the_att):
        the_att.set_value(self.skeleton_left_shoulder)

    def read_skeleton_right_shoulder(self, the_att):
        the_att.set_value(self.skeleton_right_shoulder)

    def read_skeleton_left_elbow(self, the_att):
        the_att.set_value(self.skeleton_left_elbow)

    def read_skeleton_right_elbow(self, the_att):
        the_att.set_value(self.skeleton_right_elbow)

    def read_skeleton_left_hand(self, the_att):
        the_att.set_value(self.skeleton_left_hand)

    def read_skeleton_right_hand(self, the_att):
        the_att.set_value(self.skeleton_right_hand)

    def read_skeleton_torso(self, the_att):
        the_att.set_value(self.skeleton_torso)

    def read_skeleton_left_hip(self, the_att):
        the_att.set_value(self.skeleton_left_hip)

    def read_skeleton_right_hip(self, the_att):
        the_att.set_value(self.skeleton_right_hip)

    def read_skeleton_left_knee(self, the_att):
        the_att.set_value(self.skeleton_left_knee)

    def read_skeleton_right_knee(self, the_att):
        the_att.set_value(self.skeleton_right_knee)

    def read_skeleton_left_foot(self, the_att):
        the_att.set_value(self.skeleton_left_foot)

    def read_skeleton_right_foot(self, the_att):
        the_att.set_value(self.skeleton_right_foot)

    def init_device(self):
        self.info_stream('In Python init_device method')
        self.set_state(PyTango.DevState.ON)
        self.skeleton_head = (0, 0, 0)
        self.skeleton_neck = (0, 0, 0)
        self.skeleton_left_shoulder = (0, 0, 0)
        self.skeleton_right_shoulder = (0, 0, 0)
        self.skeleton_left_elbow = (0, 0, 0)
        self.skeleton_right_elbow = (0, 0, 0)
        self.skeleton_left_hand = (0, 0, 0)
        self.skeleton_right_hand = (0, 0, 0)
        self.skeleton_torso = (0, 0, 0)
        self.skeleton_left_hip = (0, 0, 0)
        self.skeleton_right_hip = (0, 0, 0)
        self.skeleton_left_knee = (0, 0, 0)
        self.skeleton_right_knee = (0, 0, 0)
        self.skeleton_left_foot = (0, 0, 0)
        self.skeleton_right_foot = (0, 0, 0)
        print('init done')

if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyTracker)
    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()
