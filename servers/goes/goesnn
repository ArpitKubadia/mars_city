#!/usr/bin/python

import sys
import urllib
import PyTango
from ffnet import ffnet, mlgraph

class Entry(object):
    def __init__(self, values):
        self.date = '-'.join(values[:3])
        self.time = values[4]
        self.status10 = int(values[6])
        self.mev10 = float(values[7])
        self.status30 = int(values[8])
        self.mev30 = float(values[9])

    def __repr__(self):
        return ('<{0.date} {0.time}; >10Mev {0.mev10} ({0.status10}); '
                '>30Mev {0.mev30} ({0.status30})>'.format(self))


class PyDevice(PyTango.DeviceClass):
    cmd_list = {}
    attr_list = {'forecast': [[PyTango.ArgType.DevFloat,
                               PyTango.AttrDataFormat.SCALAR,
                               PyTango.AttrWriteType.READ],
                              {'polling period': 60000}]}
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")


class PyNeuralNetDevice(PyTango.Device_4Impl):
    def __init__(self, cl, name):
        conec = mlgraph((1,22,12,1))
        self.net = ffnet(conec)
        data = []
        page = urllib.urlopen('http://www.swpc.noaa.gov/ftpdir/lists/ace/ace_sis_5m.txt')
        for line in page:
            if line.startswith((':', '#')):
                continue
            values = line.split()
            status = int(values[6])
            if status == 9:
                continue
            data.append(float(values[7]))
        self.net.train_tnc(data[:15], data[-15:], maxfun=5000, messages=1)
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.info_stream('In PyNeuralNetDevice.__init__')
        PyNeuralNetDevice.init_device(self)

    def read_forecast(self, the_att):
        dev = PyTango.DeviceProxy('test/parser/test1')
        mev10 = dev['mev10'].value
        print 'mev10', mev10
        output = self.net([mev10])
        print 'output', output
        the_att.set_value(output[0])

    def is_forecast_allowed(self, req_type):
        return self.get_state() in (PyTango.DevState.ON,)

    def init_device(self):
        self.info_stream('In Python init_device method')
        self.set_state(PyTango.DevState.ON)


if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyNeuralNetDevice)

    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()
