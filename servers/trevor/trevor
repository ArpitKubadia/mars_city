#!/usr/bin/python

from __future__ import division

import sys
import PyTango
import RPi.GPIO as GPIO
from time import sleep

class PyDevice(PyTango.DeviceClass):
    cmd_list = {'start': [[PyTango.ArgType.DevVoid],
                          [PyTango.ArgType.DevVoid]],
                'stop': [[PyTango.ArgType.DevVoid],
                         [PyTango.ArgType.DevVoid]],
                'move': [[PyTango.ArgType.DevVarFloatArray],
                          [PyTango.ArgType.DevVoid]],}
    attr_type = [
        [PyTango.ArgType.DevFloat,
         PyTango.AttrDataFormat.SCALAR,
         PyTango.AttrWriteType.READ],
        {'polling period': 100}
    ]
    attr_list = {
        'translate_speed': attr_type,
        'rotate_speed': attr_type,
    }

    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")


class PyTrevor(PyTango.Device_4Impl):
    def __init__(self, cl, name):
	self.arrows = PyTango.DeviceProxy('C3/GUI/arrow')
        self.devices = {}
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.info_stream('In PyTrevor.__init__')
        PyTrevor.init_device(self)

    def __del__(self):
        print ("destructor")
	# switch MotorB/A off
	GPIO.output (19, 0)
	GPIO.output (24, 0)
	GPIO.output (21, 0)
	GPIO.output (26, 0)
	GPIO.cleanup()              # reset all ports
	
    def start(self):
        print 'start'

    def stop(self):
	# switch MotorB and MotorA \off
	GPIO.output (19, 0)
	GPIO.output (24, 0)
	GPIO.output (21, 0)
	GPIO.output (26, 0)
        print 'stop'
        
    def move(self, speed):
        self.translate_speed = float(speed[0])
        self.rotate_speed = float(speed[1])
        print 'move with translate_speed and rotate_speed values:', self.translate_speed, self.rotate_speed

    def read_translate_speed(self, the_att):
        self.translate_speed = self.arrows['translate_speed'].value
        the_att.set_value(self.traslate_speed)
        #print 'translate_speed', self.translate_speed

    def read_rotate_speed(self, the_att):
        self.translate_speed = self.arrows['translate_speed'].value
        self.rotate_speed = self.arrows['rotate_speed'].value
        the_att.set_value(self.rotate_speed)
        #print 'rotate_speed', self.rotate_speed

	port_numAforw=26
	port_numAback=21
	port_numBforw=24
	port_numBback=19
        if self.translate_speed == 0:
            GPIO.output(port_numAforw, 0)     # switch port off
            GPIO.output(port_numBforw, 0)     # switch port off
            GPIO.output(port_numAback, 0)     # switch port off
            GPIO.output(port_numBback, 0)     # switch port off
	else:
            if self.translate_speed > 0:
	        if  self.rotate_speed == 0: 
                        GPIO.output(port_numAforw, 1)      # switch port on
            		GPIO.output(port_numAback, 0)     # switch port off
                        GPIO.output(port_numBforw, 1)      # switch port on
            		GPIO.output(port_numBback, 0)     # switch port off
	        else:
	            if  self.rotate_speed < 0: 
                        GPIO.output(port_numAforw, 1)      # switch port on
                        GPIO.output(port_numAback, 0)      # switch port off
                        GPIO.output(port_numBforw, 0)      # switch port off
            		GPIO.output(port_numBback, 1)     # switch port on
                    else:
                        GPIO.output(port_numAforw, 0)      # switch port off
                        GPIO.output(port_numAback, 1)      # switch port on
                        GPIO.output(port_numBforw, 1)      # switch port on
            		GPIO.output(port_numBback, 0)     # switch port off
            else:
	        if  self.rotate_speed == 0: 
            		GPIO.output(port_numAforw, 0)     # switch port off
                        GPIO.output(port_numAback, 1)      # switch port on
            		GPIO.output(port_numBforw, 0)     # switch port off
                        GPIO.output(port_numBback, 1)      # switch port on
	        else:
	            if  self.rotate_speed < 0: 
                        GPIO.output(port_numAforw, 0)      # switch port off
                        GPIO.output(port_numAback, 1)      # switch port on
                        GPIO.output(port_numBforw, 1)      # switch port on
                        GPIO.output(port_numBback, 0)      # switch port off
                    else:
                        GPIO.output(port_numAforw, 1)      # switch port on
                        GPIO.output(port_numAback, 0)      # switch port off
                        GPIO.output(port_numBforw, 0)      # switch port off
                        GPIO.output(port_numBback, 1)      # switch port on


    def init_device(self):
        self.info_stream('In Python init_device method')
        self.translate_speed = 0
        self.rotate_speed = 0
        self.set_state(PyTango.DevState.ON)
	#GPIO specific initializations
	GPIO.cleanup()
	GPIO.setwarnings(False)
	GPIO.setmode(GPIO.BOARD)
	GPIO.setup(19, GPIO.OUT)
	GPIO.setup(21, GPIO.OUT)
	GPIO.setup(24, GPIO.OUT)
	GPIO.setup(26, GPIO.OUT)
	# switch MotorB and MotorA \off
	GPIO.output (19, 0)
	GPIO.output (24, 0)
	GPIO.output (21, 0)
	GPIO.output (26, 0)


if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyTrevor)

    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()


