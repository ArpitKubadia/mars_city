#!/usr/bin/python

import sys
import PyTango

import rcxlib

class PyDevice(PyTango.DeviceClass):
    cmd_list = {'start': [[PyTango.ArgType.DevVoid],
                          [PyTango.ArgType.DevVoid]],
                'stop': [[PyTango.ArgType.DevVoid],
                         [PyTango.ArgType.DevVoid]],
                'drive': [[PyTango.ArgType.DevVoid],
                          [PyTango.ArgType.DevVoid],
                          {'polling period': 500}],}
    attr_type = [
        [PyTango.ArgType.DevFloat,
         PyTango.AttrDataFormat.SCALAR,
         PyTango.AttrWriteType.READ],
        {'polling period': 1000}
    ]
    attr_list = {
        'speed': attr_type,
        'steering': attr_type,
    }

    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")


class PyLegoRCX(PyTango.Device_4Impl):
    def __init__(self, cl, name):
        self.rcx = rcxlib.RCX()
        self.neurohs = PyTango.DeviceProxy('c3/neurohs/epoc')
        self.devices = {}
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.info_stream('In PyLegoRCX.__init__')
        PyLegoRCX.init_device(self)

    def read_speed(self, the_att):
        self.speed = self.neurohs['speed'].value
        the_att.set_value(self.speed)
        print 'speed', self.speed

    def read_steering(self, the_att):
        self.steering = self.neurohs['steering'].value
        the_att.set_value(self.steering)
        print 'steering', self.steering

    def start(self):
        self.rcx.set_motors(1, 0, 1)
        print 'start'

    def stop(self):
        self.rcx.set_motors(0, 0, 0)
        print 'stop'

    def drive(self):
        print 'drive'

    def init_device(self):
        self.info_stream('In Python init_device method')
        self.set_state(PyTango.DevState.ON)


if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyLegoRCX)

    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()
