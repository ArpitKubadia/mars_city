#!/usr/bin/python

from __future__ import division

import sys
import PyTango


class PyDevice(PyTango.DeviceClass):
    cmd_list = { 'start': [[PyTango.ArgType.DevVoid],
                         [PyTango.ArgType.DevVoid]],
		'stop': [[PyTango.ArgType.DevVoid],
                         [PyTango.ArgType.DevVoid]],
                'drive': [[PyTango.ArgType.DevVoid],
                             [PyTango.ArgType.DevVoid],
                             {'polling period': 500}],}
    attr_type = [
        [PyTango.ArgType.DevFloat,
         PyTango.AttrDataFormat.SCALAR,
         PyTango.AttrWriteType.READ],
        {'polling period': 1000}
    ]
    attr_list = {
	'speed': attr_type,
	'steering': attr_type,
    }

    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type("TestDevice")


class PyLegoRCX(PyTango.Device_4Impl):
    def __init__(self, cl, name):
        self.devices = {}
        PyTango.Device_4Impl.__init__(self, cl, name)
        self.info_stream('In PyLegoRCX.__init__')
        PyLegoRCX.init_device(self)

    def read_speed(self, the_att):
#        speed = self.neurohs['speed'].value
        speed = 11
	the_att.set_value(speed)
        print 'speed', speed 

    def read_steering(self, the_att):
#        steering = self.neurohs['steering'].value
        steering = 12
	the_att.set_value(steering)
        print 'steering', steering
 
    def start(self):
	print 'start'

    def stop(self):
	print 'stop'

    def drive(self):
	print 'drive'

    def init_device(self):
        self.info_stream('In Python init_device method')
        self.set_state(PyTango.DevState.ON)
    

if __name__ == '__main__':
    util = PyTango.Util(sys.argv)
    util.add_class(PyDevice, PyLegoRCX)

    U = PyTango.Util.instance()
    U.server_init()
    U.server_run()
